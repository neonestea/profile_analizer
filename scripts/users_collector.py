# -*- coding: utf-8 -*-
"""users_collector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cPnV7IDWqc0aozKX_IPURNkWC00KQ_xc
"""

import warnings
warnings.filterwarnings("ignore")

import pandas as pd

import time

def prepare_df(filename):
  df = pd.read_csv(filename, delimiter = ';', encoding = 'utf-8')
  df = df.drop(columns=['Unnamed: 0'])
  return df

name = 'not_agree1.csv'
name2 = 'not_agree2.csv'

df = prepare_df(name)
df2 = prepare_df(name2)
df = pd.concat([df,df2])

df.head()

users = df['user_id'].unique()

len(users)

!pip install vk_api

import vk_api
from datetime import datetime
#from .models import ProfileInfo, GroupInfo
import uuid
#from .custom_logger import configure_logger, set_stdout_handler

session = vk_api.VkApi(token="vk1.a.Gi9VLR0O3w9yu6Mf30_rFTibl20zp6XMcjmn_sodhGHSH1tWW8_nYW9NZ9DavAhtQFnxA1sVeZ5b5754Rtzio8J8sDoCB6XFN4MX0QgbiN548Wc8xKFnqvv2Avqjb7O5xps2J8QSEpIwfR93NNq2aBKymo0KCdqiTSMXfKB36AT-x7xcnBjxTmvXxnaW4WVLniAlDvn2nVjDOCGcrjFS5Q")
vk = session.get_api()
#date_format = "%d.%m.%Y"
#logger = configure_logger()
#logger = set_stdout_handler(logger)

def check_user(user_id):
    time.sleep(1.5)
    profile = vk.users.get(user_id = user_id, fields = "activities, about, books, bdate, city, country, education, home_town, sex, status, games, interests, military, movies, music, personal, relation, tv, universities")
    if len(profile) == 0:
            return None
    return profile[0]

from datetime import datetime

date_format = "%d.%m.%Y"

def get_user_followers(user_id):
    try:
        time.sleep(1.5)
        followers = vk.users.getFollowers(user_id = user_id)
        return followers['count']
    except vk_api.exceptions.ApiError:
        return 0

def get_user_friends(user_id):
    try:
        time.sleep(1.5)
        friends = vk.friends.get(user_id = user_id)
        return friends['count']
    except vk_api.exceptions.ApiError:
        return 0

def get_user_posts(user_id):
    posts_count = 0
    try:
        time.sleep(1.5)
        wall = vk.wall.get(owner_id = user_id)
        posts_count = wall['count']
        return posts_count
    except vk_api.exceptions.ApiError:
        return posts_count

def get_user_photos(user_id):
    photos_count = 0
    try:
        photos = vk.photos.getAll(owner_id = user_id)
        photos_count = photos['count']
        return photos_count
    except vk_api.exceptions.ApiError:
        return photos_count

def get_group_description(owner_id):
    try:
        time.sleep(1.5)
        group = vk.groups.getById(group_id=owner_id, fields = "description, activity")
        result = ''
        if 'description' in group[0]:
          result += group[0]['description']
        if 'activity' in group[0]:
          result += group[0]['activity']
        return  result
    except vk_api.exceptions.ApiError:
        return "Не указано"

def get_user_groups(user_id):
    #print("get_user_groups")
    result = []
    groups = None
    try:
        time.sleep(1.5)
        groups = vk.users.getSubscriptions(user_id = user_id)
        result = groups['groups']['items']
        return result
    except vk_api.exceptions.ApiError:
        return result
    #try:
    #    groups = vk.groups.getById(group_ids=groups, fields = "description, activity")
    #    print(groups)
   # except vk_api.exceptions.ApiError:
    #    return result

def get_photo_comments(user_id):
    #print("get_photo_comments")
    user_comments = []
    others_comments = []
    try:
        time.sleep(1.5)
        photos = vk.photos.getAll(owner_id = user_id, count = 10)
    except vk_api.exceptions.ApiError:
        return user_comments, others_comments
    #logger.debug("Photos size = %s", photos['count'])
    for photo in photos['items'][:10]:
            comms = []
            try:
                time.sleep(1.5)
                comms = vk.photos.getComments(owner_id = user_id, photo_id = photo['id'])
                comms = comms['items']
            except vk_api.exceptions.ApiError:
                comms = comms
            #logger.debug("Comms size = %s", len(comms))
            for com in comms:
                    if len(com['text']) != 0:
                        if str(com['from_id']) == str(user_id):
                            user_comments.append(com['text'])
                        else:
                            others_comments.append(com['text'])

    return user_comments, others_comments

def get_user_wall(user_id):
    #print("get_user_wall")
    user_comments = []
    posts = []
    others_comments = []
    wall = None
    try:
        time.sleep(1.5)
        wall = vk.wall.get(owner_id = user_id, count = 10)
    except vk_api.exceptions.ApiError:
        return posts, user_comments, others_comments

    #logger.debug("wall size = %s", wall['count'])
    for post in wall['items'][:10]:
        if len(post['text']) != 0:
            posts.append(post['text'])
        if 'copy_history' in post:
            hist = post['copy_history']

            if len(hist[0]['text']) != 0:
                #logger.debug("post = %s", hist['text'])
                posts.append(hist[0]['text'])
        comms = []
        try:
            time.sleep(1.5)
            comms = vk.wall.getComments(owner_id = user_id, post_id = post['id'])
            comms = comms['items']
            #logger.debug("comms size = %s", len(comms))
        except vk_api.exceptions.ApiError:
            #print("ERROR")
            comms = comms
        for com in comms:
                if len(com['text']) != 0:
                    if str(com['from_id']) == str(user_id):
                        user_comments.append(com['text'])
                    else:
                        others_comments.append(com['text'])

    return posts, user_comments, others_comments

def get_comments_in_groups(user_id, df):
  df = df[df['user_id'] == int(user_id)]
  #print(df)
  comments = list(df['text'].values)
  return comments

df.head()

def get_all_user_comments(user_id, df):
    all_comments, others_comments = get_photo_comments(user_id)

    posts, usr_comms, oth_comms = get_user_wall(user_id)
    all_comments.extend(usr_comms)
    others_comments.extend(oth_comms)
    #comments_from_groups = get_comments_in_groups(user_id, df)
    #print(user_id)
    #print("from groups ", comments_from_groups)
   # all_comments.extend(comments_from_groups)

    return posts, all_comments, others_comments

def get_user_info(user_id, df):
  #print("get_user_info")
  time.sleep(3)
  profile = check_user(user_id)
  if profile is None:
    return None
  new_profile_info = {}

  profile_id = str(profile['id'])
  new_profile_info['user_id'] = profile_id
  #print(user_id)
  #print(profile)
  new_profile_info['country'] = profile['country']['title'] if 'country' in profile else "Не указано"
  new_profile_info['city'] = profile['city']['title'] if 'city' in profile else "Не указано"
  bdate = 'Не указано'
  if 'bdate' in profile:
    #print(profile['bdate'])
    try:
      bdate = datetime.strptime(profile['bdate'], date_format)
      #print(bdate)
    except:
      bdate = 'Не указано'

  new_profile_info['bdate'] =  bdate.year if bdate != 'Не указано' else bdate
  new_profile_info['interests'] = profile['interests'] if 'interests' in profile else "Не указано"
  new_profile_info['books'] = profile['books'] if 'books' in profile else "Не указано"
  new_profile_info['tv'] = profile['tv'] if 'tv' in profile else "Не указано"
  new_profile_info['games'] = profile['games'] if 'games' in profile else "Не указано"
  new_profile_info['movies'] = profile['movies'] if 'movies' in profile else "Не указано"
  new_profile_info['activities'] = profile['activities'] if 'activities' in profile else "Не указано"
  new_profile_info['music'] = profile['music'] if 'music' in profile else "Не указано"
  new_profile_info['status'] = profile['status'] if 'status' in profile else "Не указано"
  new_profile_info['military'] = len(profile['military']) != 0 if 'military' in profile else 0
  new_profile_info['university_name'] = profile['university_name'] if 'university_name' in profile else "Не указано"
  new_profile_info['faculty'] = "Не указано"
  new_profile_info['posts'] = get_user_posts(profile_id)
  new_profile_info['photos'] = get_user_photos(profile_id)
  if 'university' in profile and 'faculty' in profile:
    university_id = int(profile['university'])
    if university_id != 0:
        time.sleep(1.5)
        faculties = vk.database.getFaculties(university_id = university_id)
        for el in faculties['items']:
          if el['id'] == int(profile['faculty']):
            new_profile_info['faculty'] = el['title']
  new_profile_info['home_town'] = profile['home_town'] if 'home_town' in profile else "Не указано"
  new_profile_info['relation'] = (int(profile['relation'])) if 'relation' in profile else "Не указано"
  new_profile_info['sex'] = int(profile['sex']) if 'sex' in profile else "Не указано"
  new_profile_info['about'] = profile['about'] if 'about' in profile else "Не указано"
  new_profile_info['country'] = profile['country']['title'] if 'country' in profile else "Не указано"
  new_profile_info['city'] = profile['city']['title'] if 'city' in profile else "Не указано"
  new_profile_info['friends_count'] = get_user_friends(profile_id)
  new_profile_info['followers_count']  = get_user_followers(profile_id)
  new_profile_info['groups'] = get_user_groups(profile_id)
  new_profile_info['posts'], new_profile_info['comments'], new_profile_info['comments_of_others'] = get_all_user_comments(profile_id, df)

  if 'personal' in profile:
    pers = profile['personal']
    new_profile_info['alcohol'] = (int(pers['alcohol'])) if 'alcohol' in pers else 0
    new_profile_info['life_main'] = (int(pers['life_main'])) if 'life_main' in pers else 0
    new_profile_info['people_main'] = (int(pers['people_main'])) if 'people_main' in pers else 0
    new_profile_info['political'] = (int(pers['political'])) if 'political' in pers else 0
    new_profile_info['religion'] = pers['religion'] if 'religion' in pers else 0
    new_profile_info['smoking'] = (int(pers['smoking'])) if 'smoking' in pers else 0

  else:
    new_profile_info['alcohol'] = 0
    new_profile_info['life_main'] = 0
    new_profile_info['people_main'] = 0
    new_profile_info['political'] = 0
    new_profile_info['religion'] = 0
    new_profile_info['smoking'] = 0
  return new_profile_info

users_info = pd.DataFrame(
        [],
        columns=["user_id", "country", 'city', 'bdate', 'interests', 'books', 'tv', 'games', 'movies', 'activities', 'music', 'status',
                 'military', 'university_name', 'faculty', 'home_town', 'relation', 'sex', 'about', 'friends_count', 'followers_count',
                 'groups', 'posts', 'photos', 'comments', 'comments_of_others', 'alcohol', 'life_main', 'people_main', 'political',
                 'religion', 'smoking']
    )

import numpy as np

users = list(users)

len(users)

#users.index(405128806)

#users = users[549:]

counter = 0

new_users = vk.groups.getMembers(group_id = 32811146)['items']

new_users

from google.colab import files

#counter = 0
for user in new_users:
    if user not in users:
      user_info = None
      #try:
      user_info = get_user_info(user, df)
      #except:
        #print("Error, retrying")
      #  time.sleep(20)
      #  user_info = get_user_info(user, df)
      if user_info is not None:
        #print(user)
        users_info = users_info.append(user_info, ignore_index = True)
        print("Finished ", counter)
        new_users.remove(user)
        users_info.to_csv('not_agree3.csv', sep=';', encoding='utf-8')
        #if counter % 10 == 0:
          #files.download(name.split('.')[0] + '_users.csv')

        counter += 1
      else:
        new_users.remove(user)
        #counter += 1

users_info

users_info.to_csv(name.split('.')[0] + '_users.csv', sep=';', encoding='utf-8')

df = prepare_df("vk_users_info_01.03.2024.csv")

